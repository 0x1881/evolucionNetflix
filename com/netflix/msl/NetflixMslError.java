// 
// Decompiled by Procyon v0.5.30
// 

package com.netflix.msl;

public class NetflixMslError extends MslError
{
    public static final MslError ACCTMGR_COMMS_FAILURE;
    public static final MslError ANYCAST_CHALLENGE_PARSE_ERROR;
    public static final MslError ANYCAST_CHALLENGE_REJECTED;
    public static final MslError ASN1_ENCODE_ERROR;
    public static final MslError ASN1_PARSE_ERROR;
    public static final MslError AUTHMGR_COMMS_FAILURE;
    public static final MslError CRYPTEX_COMMS_FAILURE;
    public static final MslError CRYPTEX_CONTEXT_CREATION_FAILURE;
    public static final MslError CRYPTEX_DECRYPTION_ERROR;
    public static final MslError CRYPTEX_ENCRYPTION_ERROR;
    public static final MslError CRYPTEX_FINGERPRINT_ERROR;
    public static final MslError CRYPTEX_KEYSET_UNSUPPORTED;
    public static final MslError CRYPTEX_MAC_ERROR;
    public static final MslError CRYPTEX_PRIVILEGE_EXCEPTION;
    public static final MslError CRYPTEX_RSA_KEY_SET_NOT_FOUND;
    public static final MslError CRYPTEX_SIGN_ERROR;
    public static final MslError CRYPTEX_UNWRAP_ERROR;
    public static final MslError CRYPTEX_VERIFY_ERROR;
    public static final MslError CRYPTEX_WRAP_ERROR;
    public static final MslError CTICKET_CRYPTOCONTEXT_ERROR;
    public static final MslError CTICKET_DECRYPT_ERROR;
    public static final MslError DATAMODEL_DEVICETYPE_NOT_FOUND;
    public static final MslError DATAMODEL_DEVICE_ACCESS_ERROR;
    public static final MslError EMAILPASSWORD_INCORRECT;
    public static final MslError ENTITY_NOT_FOUND;
    public static final MslError ENTITY_REVOKED;
    public static final MslError FORCE_LOGIN;
    public static final MslError INCORRECT_ENTITYAUTH_DATA;
    public static final MslError INCORRECT_MSLUSER;
    public static final MslError KEYX_COMMS_FAILURE;
    public static final MslError KEYX_IDENTITY_FAILURE;
    public static final MslError KEYX_INVALID_GUID;
    public static final MslError MASTERTOKEN_IDENTITY_REVOKED;
    public static final MslError MASTERTOKEN_SEQUENCE_NUMBER_OUT_OF_SYNC;
    public static final MslError MDX_CONTROLLERDATA_INVALID;
    public static final MslError MDX_PIN_BLANK;
    public static final MslError MDX_PIN_MISMATCH;
    public static final MslError MDX_USERAUTH_ACTION_INVALID;
    public static final MslError MDX_USERAUTH_VERIFICATION_FAILED;
    public static final MslError MDX_USER_UNKNOWN;
    public static final MslError MEMBERSHIPCLIENT_COMMS_FAILURE;
    public static final MslError NETFLIXID_COOKIES_BLANK;
    public static final MslError NETFLIXID_COOKIES_EXPIRED;
    public static final MslError NONREPLAYABLE_ID_OUT_OF_RANGE;
    public static final MslError NPTICKET_BROKEN;
    public static final MslError NPTICKET_CIPHER_INFO_NOT_FOUND;
    public static final MslError NPTICKET_COOKIE_PARSE_ERROR;
    public static final MslError NPTICKET_COOKIE_VERIFICATION_FAILED;
    public static final MslError NPTICKET_ERROR;
    public static final MslError NPTICKET_EXPIRED;
    public static final MslError NPTICKET_GRACE_PERIOD_EXCEEDED;
    public static final MslError NPTICKET_INCORRECT_COOKIE_VERSION;
    public static final MslError NPTICKET_INCORRECT_KEY_LENGTH;
    public static final MslError NPTICKET_INVALID_CIPHER_INFO;
    public static final MslError NPTICKET_NOT_YET_VALID;
    public static final MslError NPTICKET_PRIVATE_KEY_NOT_FOUND;
    public static final MslError NPTICKET_SERVICE_ID_DISALLOWED;
    public static final MslError NPTICKET_SERVICE_ID_MISSING;
    public static final MslError NPTICKET_UNSUPPORTED_VERSION;
    public static final MslError NPTICKET_VERIFICATION_FAILED;
    private static final int OFFSET = 100000;
    public static final MslError PROFILEGUID_BLANK;
    public static final MslError PROFILE_SWITCH_DISALLOWED;
    public static final MslError SSOTOKEN_BLANK;
    public static final MslError SSOTOKEN_INVALID;
    public static final MslError SSOTOKEN_NOT_ASSOCIATED;
    public static final MslError SSO_ASSOCIATION_CONFLICT;
    public static final MslError SSO_ASSOCIATION_FAILURE;
    public static final MslError SSO_ASSOCIATION_WITH_FORMERMEMBER;
    public static final MslError SSO_ASSOCIATION_WITH_NONMEMBER;
    public static final MslError SSO_DISASSOCIATION_FAILURE;
    public static final MslError USERAUTH_ENTITY_MISMATCH;
    public static final MslError USERAUTH_INCORRECT_DATA;
    public static final MslError USERIDTOKEN_IDENTITY_ENTITY_ASSOCIATION_DEACTIVATED;
    public static final MslError USERIDTOKEN_IDENTITY_ENTITY_ASSOCIATION_ENTITY_MISMATCH;
    public static final MslError USERIDTOKEN_IDENTITY_ENTITY_ASSOCIATION_ERROR;
    public static final MslError USERIDTOKEN_IDENTITY_ENTITY_ASSOCIATION_NOT_FOUND;
    public static final MslError USERIDTOKEN_IDENTITY_ENTITY_ASSOCIATION_USER_MISMATCH;
    public static final MslError USERIDTOKEN_IDENTITY_NOT_FOUND;
    public static final MslError USERIDTOKEN_INCORRECT_MSLUSER;
    public static final MslError USERIDTOKEN_INVALID_MSLUSER;
    public static final MslError USERIDTOKEN_PASSWORD_VERSION_CHANGED;
    public static final MslError XML_ENCODE_ERROR;
    public static final MslError XML_PARSE_ERROR;
    
    static {
        ASN1_PARSE_ERROR = new NetflixMslError(22, MslConstants$ResponseCode.FAIL, "Error parsing ASN.1.");
        ASN1_ENCODE_ERROR = new NetflixMslError(23, MslConstants$ResponseCode.FAIL, "Error encoding ASN.1.");
        XML_PARSE_ERROR = new NetflixMslError(49, MslConstants$ResponseCode.FAIL, "Error parsing XML.");
        XML_ENCODE_ERROR = new NetflixMslError(50, MslConstants$ResponseCode.FAIL, "Error encoding XML.");
        MASTERTOKEN_SEQUENCE_NUMBER_OUT_OF_SYNC = new NetflixMslError(1009, MslConstants$ResponseCode.ENTITY_REAUTH, "Master token sequence number does not have the expected value.");
        MASTERTOKEN_IDENTITY_REVOKED = new NetflixMslError(1013, MslConstants$ResponseCode.ENTITY_REAUTH, "Master token entity identity is revoked.");
        USERIDTOKEN_IDENTITY_NOT_FOUND = new NetflixMslError(2013, MslConstants$ResponseCode.USER_REAUTH, "The user identity was not found.");
        USERIDTOKEN_PASSWORD_VERSION_CHANGED = new NetflixMslError(2014, MslConstants$ResponseCode.USER_REAUTH, "The user identity must be reauthenticated because the password version changed.");
        USERIDTOKEN_INCORRECT_MSLUSER = new NetflixMslError(2015, MslConstants$ResponseCode.FAIL, "The user ID token MSL user type is incorrect.");
        USERIDTOKEN_INVALID_MSLUSER = new NetflixMslError(2016, MslConstants$ResponseCode.USER_REAUTH, "The user ID token MSL user is invalid.");
        ENTITY_NOT_FOUND = new NetflixMslError(4005, MslConstants$ResponseCode.FAIL, "Entity not recognized.");
        INCORRECT_ENTITYAUTH_DATA = new NetflixMslError(4006, MslConstants$ResponseCode.FAIL, "Entity used incorrect entity authentication data type.");
        NPTICKET_GRACE_PERIOD_EXCEEDED = new NetflixMslError(4008, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "Fake NP-Tickets cannot be used after the grace period when the Playstation Network is up.");
        NPTICKET_SERVICE_ID_MISSING = new NetflixMslError(4009, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "NP-Ticket service ID is missing.");
        NPTICKET_SERVICE_ID_DISALLOWED = new NetflixMslError(4010, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "NP-Ticket service ID is not allowed.");
        NPTICKET_NOT_YET_VALID = new NetflixMslError(4011, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "NP-Ticket issuance date is in the future.");
        NPTICKET_EXPIRED = new NetflixMslError(4012, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "NP-Ticket has expired.");
        NPTICKET_PRIVATE_KEY_NOT_FOUND = new NetflixMslError(4013, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "No private key found for NP-Ticket GUID.");
        NPTICKET_COOKIE_VERIFICATION_FAILED = new NetflixMslError(4014, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "NP-Ticket cookie signature verification failed.");
        NPTICKET_INCORRECT_COOKIE_VERSION = new NetflixMslError(4015, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "Incorrect NP-Ticket cookie version.");
        NPTICKET_BROKEN = new NetflixMslError(4016, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "NP-Ticket broken.");
        NPTICKET_VERIFICATION_FAILED = new NetflixMslError(4017, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "NP-Ticket signature verification failed.");
        NPTICKET_ERROR = new NetflixMslError(4018, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "Unknown NP-Ticket TCM error.");
        NPTICKET_CIPHER_INFO_NOT_FOUND = new NetflixMslError(4019, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "No cipher information found for NP-Ticket.");
        NPTICKET_INVALID_CIPHER_INFO = new NetflixMslError(4020, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "Cipher information for NP-Ticket is invalid.");
        NPTICKET_UNSUPPORTED_VERSION = new NetflixMslError(4021, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "Unsupported NP-Ticket version.");
        NPTICKET_INCORRECT_KEY_LENGTH = new NetflixMslError(4022, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "Incorrect NP-Ticket public key length.");
        CRYPTEX_RSA_KEY_SET_NOT_FOUND = new NetflixMslError(4024, MslConstants$ResponseCode.FAIL, "Cryptex RSA key set not found.");
        ENTITY_REVOKED = new NetflixMslError(4025, MslConstants$ResponseCode.FAIL, "Entity is revoked.");
        NPTICKET_COOKIE_PARSE_ERROR = new NetflixMslError(4027, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "Error parsing NP-Ticket cookie.");
        ANYCAST_CHALLENGE_PARSE_ERROR = new NetflixMslError(4028, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "Error parsing Anycast challenge.");
        ANYCAST_CHALLENGE_REJECTED = new NetflixMslError(4029, MslConstants$ResponseCode.ENTITYDATA_REAUTH, "Anycast challenge is not acceptable.");
        FORCE_LOGIN = new NetflixMslError(5000, MslConstants$ResponseCode.USERDATA_REAUTH, "User must login again.");
        NETFLIXID_COOKIES_EXPIRED = new NetflixMslError(5001, MslConstants$ResponseCode.USERDATA_REAUTH, "Netflix ID cookie identity has expired.");
        NETFLIXID_COOKIES_BLANK = new NetflixMslError(5002, MslConstants$ResponseCode.USERDATA_REAUTH, "Netflix ID or Secure Netflix ID cookie is blank.");
        AUTHMGR_COMMS_FAILURE = new NetflixMslError(5006, MslConstants$ResponseCode.TRANSIENT_FAILURE, "Error communicating with authentication manager.");
        EMAILPASSWORD_INCORRECT = new NetflixMslError(5007, MslConstants$ResponseCode.USERDATA_REAUTH, "Email or password is incorrect.");
        SSOTOKEN_BLANK = new NetflixMslError(5009, MslConstants$ResponseCode.SSOTOKEN_REJECTED, "SSO token is blank.");
        SSOTOKEN_NOT_ASSOCIATED = new NetflixMslError(5010, MslConstants$ResponseCode.USERDATA_REAUTH, "SSO token is not associated with a Netflix user.");
        PROFILEGUID_BLANK = new NetflixMslError(5012, MslConstants$ResponseCode.USERDATA_REAUTH, "Profile GUID is blank.");
        SSOTOKEN_INVALID = new NetflixMslError(5015, MslConstants$ResponseCode.SSOTOKEN_REJECTED, "SSO token invalid.");
        ACCTMGR_COMMS_FAILURE = new NetflixMslError(5017, MslConstants$ResponseCode.TRANSIENT_FAILURE, "Error communicating with the account manager.");
        SSO_ASSOCIATION_FAILURE = new NetflixMslError(5018, MslConstants$ResponseCode.TRANSIENT_FAILURE, "SSO user association failed.");
        SSO_DISASSOCIATION_FAILURE = new NetflixMslError(5019, MslConstants$ResponseCode.TRANSIENT_FAILURE, "SSO user disassociation failed.");
        MDX_USERAUTH_VERIFICATION_FAILED = new NetflixMslError(5020, MslConstants$ResponseCode.USERDATA_REAUTH, "MDX user authentication data verification failed.");
        MDX_USERAUTH_ACTION_INVALID = new NetflixMslError(5022, MslConstants$ResponseCode.USERDATA_REAUTH, "MDX user authentication data action is invalid.");
        CTICKET_DECRYPT_ERROR = new NetflixMslError(5023, MslConstants$ResponseCode.USERDATA_REAUTH, "CTicket decryption failed.");
        CTICKET_CRYPTOCONTEXT_ERROR = new NetflixMslError(5026, MslConstants$ResponseCode.USERDATA_REAUTH, "Error creating CTicket crypto context.");
        MDX_PIN_BLANK = new NetflixMslError(5027, MslConstants$ResponseCode.USERDATA_REAUTH, "MDX controller or target PIN is blank.");
        MDX_PIN_MISMATCH = new NetflixMslError(5028, MslConstants$ResponseCode.USERDATA_REAUTH, "MDX controller and target PIN mismatch.");
        MDX_USER_UNKNOWN = new NetflixMslError(5029, MslConstants$ResponseCode.USERDATA_REAUTH, "MDX controller user ID token or CTicket is not decrypted or verified.");
        MDX_CONTROLLERDATA_INVALID = new NetflixMslError(5031, MslConstants$ResponseCode.USERDATA_REAUTH, "MDX controller authentication data is invalid.");
        USERAUTH_ENTITY_MISMATCH = new NetflixMslError(5032, MslConstants$ResponseCode.USERDATA_REAUTH, "User authentication data does not match entity identity.");
        USERAUTH_INCORRECT_DATA = new NetflixMslError(5033, MslConstants$ResponseCode.FAIL, "Entity used incorrect user authentication data type.");
        SSO_ASSOCIATION_WITH_NONMEMBER = new NetflixMslError(5034, MslConstants$ResponseCode.USERDATA_REAUTH, "SSO user association failed because the customer is not a member.");
        SSO_ASSOCIATION_WITH_FORMERMEMBER = new NetflixMslError(5035, MslConstants$ResponseCode.USERDATA_REAUTH, "SSO user association failed because the customer is a former member.");
        SSO_ASSOCIATION_CONFLICT = new NetflixMslError(5036, MslConstants$ResponseCode.USERDATA_REAUTH, "SSO user association failed because the token identifies a different member.");
        PROFILE_SWITCH_DISALLOWED = new NetflixMslError(5038, MslConstants$ResponseCode.TRANSIENT_FAILURE, "Unable to switch user profile.");
        MEMBERSHIPCLIENT_COMMS_FAILURE = new NetflixMslError(5039, MslConstants$ResponseCode.TRANSIENT_FAILURE, "Error communicating with the membership manager.");
        USERIDTOKEN_IDENTITY_ENTITY_ASSOCIATION_NOT_FOUND = new NetflixMslError(5040, MslConstants$ResponseCode.USERDATA_REAUTH, "No entity association record found for the user.");
        INCORRECT_MSLUSER = new NetflixMslError(5041, MslConstants$ResponseCode.FAIL, "The MSL user type is incorrect.");
        USERIDTOKEN_IDENTITY_ENTITY_ASSOCIATION_ERROR = new NetflixMslError(5042, MslConstants$ResponseCode.USERDATA_REAUTH, "User entity association record query returned an error.");
        USERIDTOKEN_IDENTITY_ENTITY_ASSOCIATION_ENTITY_MISMATCH = new NetflixMslError(5043, MslConstants$ResponseCode.USERDATA_REAUTH, "User entity association record query returned different entity identities.");
        USERIDTOKEN_IDENTITY_ENTITY_ASSOCIATION_DEACTIVATED = new NetflixMslError(5044, MslConstants$ResponseCode.USERDATA_REAUTH, "User entity association record is deactivated.");
        USERIDTOKEN_IDENTITY_ENTITY_ASSOCIATION_USER_MISMATCH = new NetflixMslError(5045, MslConstants$ResponseCode.USERDATA_REAUTH, "User entity association record query returned different user identities.");
        NONREPLAYABLE_ID_OUT_OF_RANGE = new NetflixMslError(6032, MslConstants$ResponseCode.FAIL, "Non-replayable message non-replayable ID is out of range.");
        KEYX_INVALID_GUID = new NetflixMslError(7000, MslConstants$ResponseCode.FAIL, "Invalid key exchange GUID.");
        KEYX_COMMS_FAILURE = new NetflixMslError(7001, MslConstants$ResponseCode.TRANSIENT_FAILURE, "Error communicating with key exchange service");
        KEYX_IDENTITY_FAILURE = new NetflixMslError(7002, MslConstants$ResponseCode.FAIL, "Identity in challenge doesn't match device identity");
        CRYPTEX_ENCRYPTION_ERROR = new NetflixMslError(8000, MslConstants$ResponseCode.FAIL, "Error encrypting data with cryptex.");
        CRYPTEX_DECRYPTION_ERROR = new NetflixMslError(8001, MslConstants$ResponseCode.FAIL, "Error decrypting data with cryptex.");
        CRYPTEX_MAC_ERROR = new NetflixMslError(8002, MslConstants$ResponseCode.FAIL, "Error computing MAC with cryptex.");
        CRYPTEX_VERIFY_ERROR = new NetflixMslError(8003, MslConstants$ResponseCode.FAIL, "Error verifying MAC or signature with cryptex.");
        CRYPTEX_CONTEXT_CREATION_FAILURE = new NetflixMslError(8004, MslConstants$ResponseCode.FAIL, "Error creating cryptex cipher or MAC context.");
        DATAMODEL_DEVICE_ACCESS_ERROR = new NetflixMslError(8005, MslConstants$ResponseCode.TRANSIENT_FAILURE, "Error accessing data model device.");
        DATAMODEL_DEVICETYPE_NOT_FOUND = new NetflixMslError(8006, MslConstants$ResponseCode.FAIL, "Data model device type not found.");
        CRYPTEX_KEYSET_UNSUPPORTED = new NetflixMslError(8007, MslConstants$ResponseCode.FAIL, "Cryptex key set not supported.");
        CRYPTEX_PRIVILEGE_EXCEPTION = new NetflixMslError(8008, MslConstants$ResponseCode.FAIL, "Insufficient privileges for cryptex operation.");
        CRYPTEX_WRAP_ERROR = new NetflixMslError(8009, MslConstants$ResponseCode.FAIL, "Error wrapping data with cryptex.");
        CRYPTEX_UNWRAP_ERROR = new NetflixMslError(8010, MslConstants$ResponseCode.FAIL, "Error unwrapping data with cryptex.");
        CRYPTEX_COMMS_FAILURE = new NetflixMslError(8011, MslConstants$ResponseCode.TRANSIENT_FAILURE, "Error communicating with cryptex.");
        CRYPTEX_SIGN_ERROR = new NetflixMslError(8012, MslConstants$ResponseCode.FAIL, "Error computing signature with cryptex.");
        CRYPTEX_FINGERPRINT_ERROR = new NetflixMslError(8013, MslConstants$ResponseCode.FAIL, "Error computing key fingerprint with cryptex.");
    }
    
    protected NetflixMslError(final int n, final MslConstants$ResponseCode mslConstants$ResponseCode, final String s) {
        super(100000 + n, mslConstants$ResponseCode, s);
    }
}
